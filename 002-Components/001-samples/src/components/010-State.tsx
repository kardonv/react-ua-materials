import React from 'react';

/**
 * ┌────────────────────────────┬────────────────────────────────────────┬────────────────────────────────────────┐
 * │         Критерій           │                Props                   │                State                   │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Призначення                │ Передача даних від батьківського       │ Зберігання локального стану            │
 * │                            │ компонента до дочірнього               │ компонента                             │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Змінюваність               │ ❌ Незмінні (read-only)               │ ✅ Змінні (через setState/useState)    │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Контроль                   │ Керується батьківським компонентом     │ Керується самим компонентом            │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Місце оголошення           │ Батьківський компонент                 │ Всередині компонента                   │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Використання у функц.      │ Передаються як аргумент функції        │ Через useState хук                     │
 * │ компонентах                │ (props)                                │                                        │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Можливість оновлення       │ ❌ Ні                                 │ ✅ Так                                 │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Повторне використання      │ ✅ Так — підходить для конфігурації   │ ❌ Тільки локально в межах компонента  │
 * ├────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤
 * │ Основне призначення        │ Комунікація між компонентами           │ Динамічна поведінка та UI              │
 * └────────────────────────────┴────────────────────────────────────────┴────────────────────────────────────────┘
 */

interface StateInClassComponentProps {
    // initialValue: number;
}

class StateInClassComponent extends React.Component<StateInClassComponentProps, { count: number }> {
    constructor(props: StateInClassComponentProps) {
        super(props);
        this.state = {
            count: 0, // Initialize state with a prop
        };
    }

    handleIncrement = () => {
        // Directly modifying state is not recommended, but for demonstration:
        // (this.state as any).count = this.state.count + 1;
        this.setState({
            count: this.state.count + 1,
        });
        console.log('Incremented count:', this.state.count);
    };

    handleDecrement = () => {
        this.setState((prevState) => ({ count: prevState.count - 1 }));
    };

    render() {
        return (
            <div>
                <h2>State in Class Component</h2>
                <p>Count: {this.state.count}</p>

                <button onClick={this.handleIncrement}>Increment</button>
                <button onClick={this.handleDecrement}>Decrement</button>
            </div>
        );
    }
}

export default StateInClassComponent;
